CREATE OR REPLACE FUNCTION jsoninsert(relname text, reljson text)
  RETURNS int AS
$BODY$
 DECLARE
 ret int;
 inputstring text;
BEGIN
  SELECT string_agg(quote_ident(key),',') INTO inputstring
    FROM json_object_keys(reljson::json) AS X (key);
  EXECUTE 'INSERT INTO '|| quote_ident(relname) 
    || '(' || inputstring || ') SELECT ' ||  inputstring 
    || ' FROM json_populate_record( NULL::' || quote_ident(relname) || ' , json_in($1)) RETURNING *'
    INTO ret USING reljson::cstring;

  GET DIAGNOSTICS ret = ROW_COUNT;
  RETURN ret;
END;
$BODY$
LANGUAGE plpgsql VOLATILE;




------------------------------------------------------------------------------------------------------
-- Function: public.saveuser(json)
-- DROP FUNCTION public.saveuser(json);
/****************************************************
    Author : Ravindra Lonkar
    select saveUser('{"fbid":"5549","firstname":"hfhd","lastname":"hjh","isactive":"1"}');
*****************************************************/
CREATE OR REPLACE FUNCTION public.saveUser(userJson json)
  RETURNS VARCHAR(10) AS
$BODY$
 DECLARE
    ret VARCHAR(10);  
 BEGIN
	
     -- UPDATE txn_user 
          --SET firstname = (select userJson::json->>'firstname')
          --,lastname = (select userJson::json->>'lastname')           
    --  WHERE fbid = (select userJson::json->>'fbid');
     
      INSERT INTO txn_user(fbid,firstname,lastname,isactive)
      SELECT fbid,firstname,lastname,isactive FROM json_populate_record(null::txn_user, userJson)  
      WHERE NOT EXISTS (select 1 from txn_user where fbid = (select userJson::json->>'fbid') limit 1)
      RETURNING userid into ret;
        
      RETURN ret;
 END;
 $BODY$
  LANGUAGE plpgsql VOLATILE;	

 
